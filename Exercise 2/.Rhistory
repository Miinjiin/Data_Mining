list(
knitr:: kable(coef_df, valign='t'),
kintr:: kable(credit_history,col.names = c("history", "count"))
)
)
knitr::kables(
list(
knitr:: kable(coef_df, valign='t'),
knitr:: kable(credit_history,col.names = c("history", "count"))
)
)
dev=read.csv('Data/hotels_dev.csv')
# split into training and testing set
dev_split = initial_split(dev, prop = 0.8)
dev_train = training(dev_split)
dev_test = testing(dev_split)
# baseline1: using only four features
b1 = dev %>%
select(children, market_segment, adults, customer_type, is_repeated_guest)
# building linear model using four features
b1_lm = lm(children ~ market_segment + adults + customer_type +is_repeated_guest, data=dev_train, family=binomial)
# examine the fitted coefficients
coef1= coef(b1_lm) %>% round(3)
# baseline2: using all predictor except the arrival date
b2 = dev[, colnames(dev)[colnames(dev)!='arrival_date']]
# building linear model
b2_lm=lm(children ~ . - arrival_date, data=dev_train, family=binomial)
# examine the fitted coefficients
coef2= coef(b1_lm) %>% round(3)
# build the best linear model, similar method that we used for number 1, and we'll add some interaction variable which seems highly correlated
# let's see columns names first and pick ones that seems related
colname = colnames(dev)
# see if the type is integer or character
type = str(dev)
# result: some columns are int, some columns are chr
# Add interaction variables and made sample best linear model
b_best_lm=lm(children ~ . - arrival_date + adults:stays_in_weekend_nights + adults:total_of_special_requests + adults:average_daily_rate + average_daily_rate:total_of_special_requests, data=dev_train)
# calculating the confusion matrix which tabulates predicted class versus actual class , tresholding predicted probabilities at 0.5
# Confusion matrix for baseline 1
phat_b1=predict(b1_lm,dev_test)
yhat_b1=ifelse(phat_b1 > 0.5, 1, 0)
confusion_b1=table(y=dev_test$children, yhat=yhat_b1)
# Confusion matrix for baseline 2
phat_b2=predict(b2_lm,dev_test)
yhat_b2=ifelse(phat_b2 > 0.5, 1, 0)
confusion_b2=table(y=dev_test$children, yhat=yhat_b2)
# Confusion matrix for best linear model we made
phat_b_best=predict(b_best_lm,dev_test)
yhat_b_best=ifelse(phat_b_best > 0.5, 1, 0)
confusion_b_best=table(y=dev_test$children, yhat=yhat_b_best)
dev=read.csv('Data/hotels_dev.csv')
# split into training and testing set
dev_split = initial_split(dev, prop = 0.8)
dev_train = training(dev_split)
dev_test = testing(dev_split)
b1 = dev %>%
select(children, market_segment, adults, customer_type, is_repeated_guest)
# building linear model using four features
b1_lm = lm(children ~ market_segment + adults + customer_type +is_repeated_guest, data=dev_train, family=binomial)
# examine the fitted coefficients
coef1= coef(b1_lm) %>% round(3)
b2 = dev[, colnames(dev)[colnames(dev)!='arrival_date']]
# building linear model
b2_lm=lm(children ~ . - arrival_date, data=dev_train, family=binomial)
# examine the fitted coefficients
coef2= coef(b1_lm) %>% round(3)
colname = colnames(dev)
# see if the type is integer or character
type = str(dev)
col = colnames(dev)
# see if the type is integer or character
type = str(dev)
knitr::kables(
list(
knitr:: kable(confusion_b1, valign='t'),
knitr:: kable(round(sum(diag(confusion_b1))/sum(confusion_b1) * 100, 2))
)
)
knitr::kables(
list(
knitr:: kable(confusion_b_best, valign='t'),
knitr:: kable(round(sum(diag(confusion_b_best))/sum(confusion_b_best) * 100, 2))
)
)
medium_rmse<-rmse(lm_medium,saratoga_test)
answer_rmse<-rmse(lm_answer,saratoga_test)
knitr:: kable(medium_rmse,answer_rmse)
medium_rmse<-rmse(lm_medium,saratoga_test)
answer_rmse<-rmse(lm_answer,saratoga_test)
medium_rmse
answer_rmse
data(SaratogaHouses)
# split into training and testing set
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
#1) Best linear model
# medium model we did in linear model class
lm_medium = lm(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse_for_med = rmse(lm_medium, saratoga_test)
#coef(lm_medium) %>% round(0)
# medium model we did in AIC class
#lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms + fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=saratoga_train)
# add meaningful interaction variable
lm_answer = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse_for_ours=rmse(lm_answer, saratoga_test)
# add not meaningful interaction variable
lm_notanswer= lm(price ~ . +  (age:livingArea + centralAir:lotSize) - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse_for_not_meaningful_interaction=rmse(lm_notanswer, saratoga_test)
medium_rmse<-rmse(lm_medium,saratoga_test)
answer_rmse<-rmse(lm_answer,saratoga_test)
medium_rmse
answer_rmse
data(SaratogaHouses)
# split into training and testing set
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
#1) Best linear model
# medium model we did in linear model class
lm_medium = lm(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse_for_med = rmse(lm_medium, saratoga_test)
#coef(lm_medium) %>% round(0)
# medium model we did in AIC class
#lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms + fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=saratoga_train)
# add meaningful interaction variable
lm_answer = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse_for_ours=rmse(lm_answer, saratoga_test)
# add not meaningful interaction variable
lm_notanswer= lm(price ~ . +  (age:livingArea + centralAir:lotSize) - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse_for_not_meaningful_interaction=rmse(lm_notanswer, saratoga_test)
medium_rmse<-rmse(lm_medium,saratoga_test)
answer_rmse<-rmse(lm_answer,saratoga_test)
medium_rmse
answer_rmse
knn_saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
knn_saratoga_train = training(knn_saratoga_split)
knn_saratoga_test = testing(knn_saratoga_split)
# standarize before applying KNN
Xtrain=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=knn_saratoga_train)
Xtest=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=knn_saratoga_test)
# training and testing set responses
ytrain=knn_saratoga_train$price
ytest=knn_saratoga_test$price
# now rescale
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale=scale_train)
Xtilde_test = scale(Xtest, scale=scale_train)
# fix the range of k
k_grid=2:150
colnames(Xtilde_train)
colnames(Xtilde_test)
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price~lotSize+age+livingArea+bedrooms+fireplaces+bathrooms+rooms+heatinghotair+heatinghotwater/steam+heatingelectric+fuelelectric+fueloil+centralAir, data=Xtilde_train, k=i)
rmse(knn_k, Xtilde_test)
}
view(Xtrian)
view(Xtrain)
data("SaratogaHouses")
view(Xtilde_train)
View(saratoga_train)
View(Xtilde_train)
View(saratoga_train)
k_grid=2:150
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtilde_train, k=i)
rmse(knn_k, Xtilde_test)
}
Xtrain_full <- data.frame(
Xtilde_train,
subset(knn_saratoga_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
)
View(Xtrain_full)
k_grid=2:150
colnames(Xtilde_train)
colnames(Xtilde_test)
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtilde_train, k=i)
rmse(knn_k, Xtilde_test)
}
Xtrain_add <- subset(knn_saratoga_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction")
Xtrain_add <- subset(knn_saratoga_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
View(Xtrain_add)
Xtrain_full <- data.frame(Xtilde_train,X_train_add)
Xtrain_add <- subset(knn_saratoga_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtrain_full <- data.frame(Xtilde_train,X_train_add)
Xtrain_full <- data.frame(Xtilde_train,Xtrain_add)
k_grid=2:150
colnames(Xtilde_train)
colnames(Xtilde_test)
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtilde_train, k=i)
rmse(knn_k, Xtilde_test)
}
View(Xtrain_full)
k_grid=2:150
colnames(Xtilde_train)
colnames(Xtilde_test)
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtilde_full, k=i)
rmse(knn_k, Xtilde_test)
}
k_grid=2:150
colnames(Xtilde_train)
colnames(Xtilde_test)
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse(knn_k, Xtilde_test)
}
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
k_grid=2:150
colnames(Xtilde_train)
colnames(Xtilde_test)
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse(knn_k, Xtilde_test)
}
view(Xtrain_full)
sum(Xtrain_full)
is.data.frame(Xtrain_full)
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale=scale_train)
Xtilde_test = scale(Xtest, scale=scale_train)
Xtrain_add <- subset(knn_saratoga_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtest_add <- subset(knn_saratoga_test, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
# add chr value columns again
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
# fix the range of k
k_grid=2:150
finding_smallest_k = foreach(i=2:150, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse(knn_k,Xtest_full)
}
finding_smallest_k = finding_smallest_k %>% as.data.frame()
View(finding_smallest_k)
best_k=min(finding_smallest_k)
best_k
finding_smallest_k = finding_smallest_k %>% as.data.frame()
best_k=which(min(finding_smallest_k))
best_k=min(finding_smallest_k)
finding_smallest_k[which.min(best_k)]
best_k=min(finding_smallest_k)
a=finding_smallest_k[which.min(best_k)]
a
# KNN wit
best_k=min(finding_smallest_k)
a=finding_smallest_k[which.min(best_k)]
a
View(a)
finding_smallest_k = finding_smallest_k %>% as.data.frame()
finding_smallest_k[which.min(finding_smallest_k)]
which(finding_smallest_k == min(finding_smallest_k))
knn_best_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=best_k)
rmse(knn_best_k,Xtest_full)
knn_best_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=best_k)
rmse(knn_best_k,Xtest_full)
knn_best_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=2)
rmse(knn_best_k,Xtest_full)
optimal_k = finding_smallest_k %>%
filter(err == min(finding_smallest_k$err))
finding_smallest_k = foreach(k_grid, .combine='rbind') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse_k=rmse(knn_k,Xtest_full)
c(k=knn_k,rmse= rmse_k)
} %>% as.data.frame()
View(finding_smallest_k)
optimal_k = finding_smallest_k %>%
filter(err == min(finding_smallest_k$rmse))
optimal_k = finding_smallest_k %>%
filter(rmse == min(finding_smallest_k$rmse))
k_grid=2:150
finding_smallest_k = foreach(k=k_grid, .combine='rbind') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse_k=rmse(knn_k,Xtest_full)
c(k=knn_k,rmse= rmse_k)
} %>% as.data.frame()
optimal_k = finding_smallest_k %>%
filter(rmse == min(finding_smallest_k$rmse))
View(finding_smallest_k)
k_grid=2:150
finding_smallest_k = foreach(k=k_grid, .combine='rbind') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse_k=rmse(knn_k,Xtest_full)
c(k=knn_k,rmse= rmse_k)
} %>% as.data.frame()
rmse == min(finding_smallest_k$rmse)
rmse_out_saratoga=foreach(i=2:150, .combine='c') %do% {
knn_model_saratoga= knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
modelr::rmse(knn_model_saratoga,Xtest_full)
}
rmse_out_saratoga
knn_saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
knn_saratoga_train = training(knn_saratoga_split)
knn_saratoga_test = testing(knn_saratoga_split)
Xtrain=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=knn_saratoga_train)
Xtest=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=knn_saratoga_test)
ytrain=knn_saratoga_train$price
ytest=knn_saratoga_test$price
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale=scale_train)
Xtilde_test = scale(Xtest, scale=scale_train)
Xtilde_test=data.frame(Xtilde_test)%>%
mutate(price=c(ytest))
Xtilde_train=data.frame(Xtilde_train)%>%
mutate(price=c(ytrain))
rmse_out_saratoga=foreach(i=2:150, .combine='c') %do% {
knn_model_saratoga= knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
modelr::rmse(knn_model_saratoga,Xtest_full)
}
rmse_out_saratoga
finding_smallest_k = foreach(k=k_grid, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse_k=rmse(knn_k,Xtest_full)
}
finding_smallest_k = foreach(k=k_grid, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse_k=rmse(knn_k,Xtest_full)
}
finding_smallest_k = finding_smallest_k %>% as.data.frame()
Xtrain_add <- subset(knn_saratoga_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtest_add <- subset(knn_saratoga_test, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
# add chr value columns again
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
finding_smallest_k = foreach(i=k_grid, .combine='c') %do% {
knn_k=knnreg(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=Xtrain_full, k=i)
rmse_k=rmse(knn_k,Xtest_full)
}
finding_smallest_k = finding_smallest_k %>% as.data.frame()
best_k=which(finding_smallest_k == min(finding_smallest_k))
best_k
k_grid=2:150
finding_smallest_k = foreach(i=k_grid, .combine='c') %do% {
knn_k=knnreg(price ~ ., data=Xtrain_full, k=i)
rmse_k=rmse(knn_k,Xtest_full)
}
finding_smallest_k = finding_smallest_k %>% as.data.frame()
best_k=which(finding_smallest_k == min(finding_smallest_k))
best_k
View(finding_smallest_k)
knn_compare=knnreg(price ~ ., data=Xtrain_full, k=best_k)
rmse(knn_compare,Xtest_full)
lm_answer = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse(lm_answer, saratoga_test)
compare_two_model= do(150)*{
compare_two_split = initial_split(SaratogaHouses, prop = 0.8)
compare_two_train = training(compare_two_split)
compare_two_test = testing(compare_two_split)
Xtrain=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_train)
Xtest=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_test)
ytrain=compare_two_train$price
ytest=compare_two_test$price
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale=scale_train)
Xtilde_test = scale(Xtest, scale=scale_train)
Xtrain_add <- subset(compare_two_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtest_add <- subset(compare_two_test, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
knn_compare=knnreg(price ~ ., data=Xtrain_full, k=best_k)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=compare_two_train)
yhat_test_large = predict(lm_compare, compare_two_test)
rmse(knn_compare,compare_two_test)
rmse(lm_answer, yhat_test_large)
}
compare_two_split = initial_split(SaratogaHouses, prop = 0.8)
compare_two_train = training(compare_two_split)
compare_two_test = testing(compare_two_split)
Xtrain=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_train)
Xtest=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_test)
ytrain=compare_two_train$price
ytest=compare_two_test$price
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale=scale_train)
Xtilde_test = scale(Xtest, scale=scale_train)
Xtrain_add <- subset(compare_two_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtest_add <- subset(compare_two_test, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
knn_compare=knnreg(price ~ ., data=compare_two_train, k=best_k)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=compare_two_train)
yhat_test_large = predict(lm_compare, compare_two_test)
rmse(knn_compare,compare_two_test)
rmse(lm_answer, yhat_test_large)
rmse(knn_compare,compare_two_test)
rmse(lm_answer, yhat_test_large)
rmse(lm_compare, yhat_test_large)
rmse(lm_compare, yhat_test_large)
yhat_test_large = predict(lm_compare, saratoga_test)
rmse(knn_compare,compare_two_test)
rmse(lm_compare, yhat_test_large)
rmse(lm_compare, yhat_test_large)
yhat_test_large = predict(lm_compare, saratoga_test)
rmse(knn_compare,compare_two_test)
rmse(lm_compare$price, yhat_test_large)
rmse(lm_compare$price, yhat_test_large)
yhat_test_large = predict(lm_compare, compare_two_test)
rmse(knn_compare,compare_two_test)
rmse(lm_compare$price, yhat_test_large)
yhat_test_large = predict(lm_compare, compare_two_test)
rmse(knn_compare,compare_two_test)
rmse(compare_two_test$price, yhat_test_large)
yhat_test_large = predict(lm_compare, saratoga_test)
rmse(knn_compare,compare_two_test)
rmse(saratoga_test$price, yhat_test_large)
# read the data
data(SaratogaHouses)
# split into training and testing set
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
yhat_test_large = predict(lm_compare, saratoga_test)
rmse(knn_compare,compare_two_test)
rmse(saratoga_test$price, yhat_test_large)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
yhat_test_large = predict(lm_compare, saratoga_test)
rmse(knn_compare,compare_two_test)
rmse(saratoga_test$price, yhat_test_large)
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
knn_compare=knnreg(price ~ ., data=compare_two_train, k=best_k)
rmse(knn_compare,compare_two_test)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
yhat_test_large = predict(lm_compare, saratoga_test)
rmse(saratoga_test$price, yhat_test_large)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=compare_two_train)
rmse(lm_compare,compare_two_test)
knn_compare=knnreg(price ~ ., data=compare_two_train, k=best_k)
rmse(knn_compare,compare_two_test)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=compare_two_train)
rmse(lm_compare,compare_two_test)
compare_two_model= do(150)*{
compare_two_split = initial_split(SaratogaHouses, prop = 0.8)
compare_two_train = training(compare_two_split)
compare_two_test = testing(compare_two_split)
Xtrain=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_train)
Xtest=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_test)
ytrain=compare_two_train$price
ytest=compare_two_test$price
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale=scale_train)
Xtilde_test = scale(Xtest, scale=scale_train)
Xtrain_add <- subset(compare_two_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtest_add <- subset(compare_two_test, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
knn_compare=knnreg(price ~ ., data=compare_two_train, k=best_k)
rmse(knn_compare,compare_two_test)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=compare_two_train)
rmse(lm_compare,compare_two_test)
}
compare_two_model
View(compare_two_model)
compare_two_model= do(150)*{
compare_two_split = initial_split(SaratogaHouses, prop = 0.8)
compare_two_train = training(compare_two_split)
compare_two_test = testing(compare_two_split)
Xtrain=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_train)
Xtest=model.matrix(~ . - pctCollege - sewer - waterfront - landValue - newConstruction - 1, data=compare_two_test)
ytrain=compare_two_train$price
ytest=compare_two_test$price
scale_train = apply(Xtrain, 2, sd)
Xtilde_train = scale(Xtrain, scale=scale_train)
Xtilde_test = scale(Xtest, scale=scale_train)
Xtrain_add <- subset(compare_two_train, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtest_add <- subset(compare_two_test, select = c("pctCollege","sewer","waterfront","landValue","newConstruction"))
Xtrain_full = data.frame(Xtilde_train,Xtrain_add) %>% as.data.frame()
Xtest_full = data.frame(Xtilde_test,Xtest_add) %>% as.data.frame()
knn_compare=knnreg(price ~ ., data=compare_two_train, k=best_k)
rmse(knn_compare,compare_two_test)
lm_compare = lm(price ~ . +  (livingArea:lotSize + livingArea:fuel + livingArea:centralAir + bedrooms:bathrooms + heating:fuel) - pctCollege - sewer - waterfront - landValue - newConstruction, data=compare_two_train)
rmse(lm_compare,compare_two_test)
c(rmse(knn_compare,compare_two_test),rmse(lm_compare,compare_two_test))
}
compare_two_model
knitr:: kable(compare_two_model, col.names = c("RMSE_RNN","RMSE_LM"))
knitr:: kable(head(compare_two_model), col.names = c("RMSE_RNN","RMSE_LM"))
colMeans(compare_two_model)
library(gamlr)
library(tidyverse)
# see https://arxiv.org/pdf/1209.5026.pdf for a lot more!
# read in data: all goals in NHL hockey from 2002-2014
goal = read.csv("../data/hockey/goal.csv", row.names=1)
# read in data: all goals in NHL hockey from 2002-2014
goal = read.csv("/Users/minjinkang/Desktop/ECO395M/data/hockey/goal.csv", row.names=1)
head(goal, 10)
config = readMM("../data/hockey/config.mtx")
config = readMM("/Users/minjinkang/Desktop/ECO395M/data/hockey/config.mtx")
team = readMM("/Users/minjinkang/Desktop/ECO395M/data/hockey/team.mtx")
player = readMM("/Users/minjinkang/Desktop/ECO395M/data/hockey/player.mtx")
View(config)
view(config)
colnames(config) = scan('/Users/minjinkang/Desktop/ECO395M/data/hockey/config_names.txt', what='char', sep="\n")
colnames(team) = scan('/Users/minjinkang/Desktop/ECO395M/data/hockey/team_names.txt', what='char', sep="\n")
colnames(player) = scan('/Users/minjinkang/Desktop/ECO395M/data/hockey/player_names.txt', what='char', sep="\n")
view(colnames(config))
team[1:30, 1:50]
player[1:7, 1:40]
view(team)
image(player[1:7, 1:40], asp=0.6)
head(config,10)
full_strength_goals = which(rowSums(config) == 0)
length(full_strength_goals)
x0 = player[full_strength_goals,]
y0 = goal$homegoal[full_strength_goals]
fit0 = cv.gamlr(x0, y0, nfold=10, verb=TRUE,
standardize=FALSE, family="binomial")
